#!/bin/bash

##==============================================================================
##
## Build a docker image and write the output to an EXT2 image
##
##==============================================================================

usage()
{
    echo ""
    echo "Usage: $0 <ext2_image> <docker_build_args...>"
    echo ""
    echo "Where:"
    echo "    <ext2_image> will be created from the docker build process"
    echo "    <docker_build_args...> arg the standard docker build arguments"
    echo ""
    echo "Examples:"
    echo "    docker-build-ext2 ext2_image ."
    echo "    docker-build-ext2 ext2_image --quiet ."
    echo "    docker-build-ext2 ext2_image docker_build_dir"
    echo "    docker-build-ext2 ext2_image -f=MyDockerfile ."
    echo ""
    exit 1
}

# check number of arguments
if [ "$#" -lt "2" ]; then
    usage
fi

# Collect command-line arguments
arg0=$0
ext2_image=$1
shift

mnt_dir=""
iid_file=""

# unmount and remove temporary files
exit_cleanup()
{
    if [ ! -z "${mnt_dir}" ]; then
        sudo umount ${mnt_dir}
        rm -rf ${mnt_dir}
    fi

    if [ ! -z "${iid_file}" ]; then
        rm -rf ${iid_file}
    fi
}

# Trap exit to perform cleanup
trap exit_cleanup EXIT

# Create a temporary mount directory
mnt_dir=$(/bin/mktemp -d)
if [ ! -d ${mnt_dir} ]; then
    echo "${arg0}: failed to create temporary mount directory"
    exit 1
fi

# Create a temporary iid file
iid_file=$(/bin/mktemp)
if [ ! -f ${iid_file} ]; then
    echo "${arg0}: failed to create temporary iid file"
    exit 1
fi

# Locate the binary directory (where myst programs reside)
bindir=$(realpath $(dirname ${arg0})/../build/bin)
if [ ! -d "${bindir}" ]; then
    echo "${arg0}: bin directory not found: ${bindir}"
    exit 1
fi

# Locate the the mount-docker-image program
mount_docker_image=${bindir}/mount-docker-image
if [ ! -x "${mount_docker_image}" ]; then
    echo "${arg0}: cannot find mount-docker-image program"
    exit 1
fi

# Locate the "myst" program
myst=${bindir}/myst
if [ ! -x "${myst}" ]; then
    echo "${arg0}: cannot find myst program"
    exit 1
fi

# Build the docker image, passing an docker build arguments
docker build --iidfile "${iid_file}" $*
if [ "$?" != "0" ]; then
    echo "${arg0}: failed to build the docker image"
    exit 1
fi

# mount the docker image
"${mount_docker_image}" "${iid_file}" "${mnt_dir}" | xargs sudo
if [ "$?" != "0" ]; then
    echo "${arg0}: mount-docker-image program failed"
    exit 1
fi

# convert the mounted docker image into an EXT2 image
sudo ${myst} mkext2 --force ${mnt_dir} ${ext2_image}
if [ "$?" != "0" ]; then
    echo "${arg0}: myst mkext2 command failed"
    exit 1
fi
