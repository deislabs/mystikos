#!/bin/bash

##==============================================================================
##
## code-format
##
## Synopsis:
##     Format source files to conform to the Project coding conventions.
##
## Usage:
##     code-format [options] <source_files...>
##
## Options:
##     --check -- return 1 if any source file is misformatted; else return 0
##
##==============================================================================

check=0

# process options:
for opt
do

  arg=`expr "x$opt" : 'x[^=]*=\(.*\)'`
  case $opt in

    --check)
      check=1
      shift
      ;;

    --*)
      echo "$0: unknown option:  $opt"
      exit 1
      ;;

  esac

done

if [ "$#" == "0" ]; then
    echo "Usage: $0 <source-file>..."
    exit 1
fi

cf=$(which clang-format-7)

if [ ! -x "${cf}" ]; then
    echo "$0: cannot find clang-format-7"
fi

ret=0

for i
do
    # if --check option present, then only check whether formatted.
    if [ "${check}" == "1" ]; then

        # make a backup copy of the file: ".<filename>.code-format"
        dirname=$(dirname ${i})
        basename=$(basename ${i})
        mkdir -p ${dirname}/.code-format
        tmp=${dirname}/.code-format/${basename}
        cp ${i} ${tmp}
        ${cf} -style=file -i ${tmp}

        # Diff the file and exit with 1 if different
        diff "${i}" "${tmp}" > /dev/null 2> /dev/null
        if [ "$?" != "0" ]; then
            ret=0
            echo "misformatted: ${i}"
        fi
        rm -rf ${dirname}/.code-format ${tmp}
    else
        ${cf} -style=file -i ${i}
    fi
done

exit "${ret}"
