variables:
  - group: myst-pipeline
  - name: SCRIPTS_ROOT
    value: $(Build.SourcesDirectory)/.azure_pipelines/scripts
  - name: MYST_NIGHTLY_RUN_DASHBOARD
    value: 'https://openenclave.visualstudio.com/ACC-Services/_dashboards/dashboard/90072dae-a6fb-41f2-93ec-176f04066da6'
  - name: MYST_ENABLE_GCOV
    value: 1
  
# nightly pipeline will be triggered in pipeline schedule settings.

trigger: none
pr: none

jobs:
- job: BuildAndTest
  displayName: 'Building and Testing'
  timeoutInMinutes: 300
  pool: '1804DC4CCagentpool'

  steps:
    # perform cleanup before starting pipeline
    - script: |
        sudo rm -rf /tmp/myst*
        df
      displayName: 'cleanup tmpfiles'
    # install minimum required package to run pipeline
    - script: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install build-essential lcov python3-setuptools python3-pip llvm-7 libmbedtls-dev docker-ce lldb-10 -y
        sudo chmod 666 /var/run/docker.sock
        sudo pip3 install lcov_cobertura
      displayName: 'minimum init config'

    # build all source files
    - script: |
        make distclean && sudo rm -rf `git ls-files --others --directory` && make -j
      displayName: 'build repo source'
      workingDirectory: $(Build.SourcesDirectory)
      env:
        MYST_NIGHTLY_TEST: 1

    # run all tests
    - script: |
        make tests ALLTESTS=1 VERBOSE=1
      displayName: 'run all tests'
      continueOnError: true
      enabled: true
      workingDirectory: $(Build.SourcesDirectory)
      env:
        MYST_NIGHTLY_TEST: 1

    # run solution tests
    - script: |
        make tests -C $(Build.SourcesDirectory)/solutions
      displayName: 'run solution tests'
      continueOnError: true
      enabled: true
      workingDirectory: $(Build.SourcesDirectory)
      env:
        # by default sql solution test will run on US EAST DB Node
        DB_NAME: $(DB_NAME_USEAST)
        DB_SERVER_NAME: $(DB_SERVER_NAME_USEAST)
        MAA_URL: $(DB_MAA_URL_USEAST)

    # measure code coverage
    - script: |
        bash $(Build.SourcesDirectory)/scripts/myst_cc
        python3 -m "lcov_cobertura" lcov.info -o lcov.xml
      displayName: 'measure code coverage'
      workingDirectory: $(Build.SourcesDirectory)
    
    # install dot net core for generating code coverage report
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 2.x
        installationPath: $(Agent.ToolsDirectory)/dotnet
    
    # Publish code coverage results
    # Publish Cobertura code coverage results from a build
    - task: PublishCodeCoverageResults@1
      displayName: "Publish Code Coverage Result"
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: $(Build.SourcesDirectory)/lcov.xml
        #failIfCoverageEmpty: false # Optional
          
    - script: |
        make clean -C $(Build.SourcesDirectory)/tests
        make clean -C $(Build.SourcesDirectory)/solutions
        sudo rm -rf $(Build.SourcesDirectory)/build/tests
        sudo rm -rf `git ls-files --others --directory`
        docker system prune -f
      condition:  always()
      displayName: 'Cleanup test directories'
      continueOnError: true
      enabled: true
      workingDirectory: $(Build.SourcesDirectory)

    # if any previous step(s) not succeed, fail the job
    - script: |
        echo "Not all steps succeed."
        exit 1
      displayName: 'Error(s) Check'
      condition: not(eq(variables['Agent.JobStatus'], 'succeeded'))
    
# Skip publishing artifact since it is not required at the moment
# - task: PublishPipelineArtifact@1
#   displayName: "Archive Reports(Download)"
#   inputs:
#     targetPath: $(Build.SourcesDirectory)/lcov.info
#     artifactName: lcov.info

# current ADO repo MSAzure/One does not have required plugin and 
# SMTP service configured. Temporarily comment out all email related 
# modules to unblock the nightly pipeline. They will be restored back 
# after approval.
# - job: EmailTestSummary
#   displayName: 'Send Build Summary'
#   timeoutInMinutes: 10 
#   dependsOn: BuildAndTest
#   condition: always()
#   pool:
#     vmImage: windows-latest
#   steps:
#     - task: EmailReport@1
#       inputs:
#         sendMailConditionConfig: 'Always'
#         toAddress: 'mystikos@service.microsoft.com'
#         subject: '{environmentStatus}: Mystikos Nightly Pipeline Summary for Build $(Build.BuildNumber)'
#         defaultDomain: 'service.microsoft.com'
#         groupTestResultsBy: 'run'
#         includeCommits: true
#         maxTestFailuresToShow: '15'
#         includeOthersInTotal: false
#         usePreviousEnvironment: false
#         smtpConnectionEndpoint: 'SMTPConnectionForEmailReportTask'

# - job: EmailCodeCoverage
#   displayName: 'Send Code Coverage Report'
#   timeoutInMinutes: 10 
#   dependsOn: BuildAndTest
#   condition: always()
#   pool:
#     vmImage: windows-latest
  
#   steps:
#     - task: DownloadBuildArtifacts@0
#       displayName: Download Code Coverage Reports
#       inputs:
#         downloadPath: $(Build.SourcesDirectory)
#         downloadType: 'current'
#         itemPattern: 'total_cov/total_cov.info'

#     - task: SendEmail@1
#       inputs:
#         To: 'mystikos@service.microsoft.com'
#         From: 'akstestpipeline@outlook.com'
#         Subject: '[Build $(Agent.JobStatus)] Mystikos Nightly Pipeline Code Coverage Report'
#         Body: '
#         <head> 
#           <h3>[Build $(Agent.JobStatus)] Mystikos Nightly Pipeline Build Notification</h3>
#         </head>
#         <body> 
#           <p> Build number $(Build.BuildNumber) in $(Build.Repository.Name): </p>
#           <p> Status: $(Agent.JobStatus)</p>
#           <p> Branch: $(Build.SourceBranchName)</p>
#           <p> <a href="$(MYST_NIGHTLY_RUN_DASHBOARD)" target="_blank">Code Coverage Dashboard</a>
# </p>
#           <br>
#           <p> Note:</p>
#           <p> To have the report locally, please download the attached file: total_cov.info, and run below command:</p>
#           <p> genhtml --ignore-errors source /path/downloaded/attachment/total_cov.info --legend --title "myst code coverage" --output-directory=/path/to/store/the/report </p>
#           <br>
#         </body>'
#         BodyAsHtml: true
#         AddAttachment: true
#         Attachment: '$(Build.SourcesDirectory)/total_cov/total_cov.info'
#         SmtpServer: $(SMTP_SERVER)
#         SmtpUsername: $(SMTP_USERNAME)
#         SmtpPassword: $(SMTP_PASSWORD)
        
    
