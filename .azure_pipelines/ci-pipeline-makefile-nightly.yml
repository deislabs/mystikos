variables:
  - group: myst-pipeline
  - name: SCRIPTS_ROOT
    value: $(Build.SourcesDirectory)/.azure_pipelines/scripts

# nightly pipeline will be triggered in pipeline schedule settings.

trigger: none
pr: none

jobs:
- job: BuildAndTest
  displayName: 'Building and Testing'
  # nightly pipeline will have 300 min timeout, approx. time used:
  # 10m build
  # 15m basic/unit tests
  # 1-4h solution tests(based on which are enabled)
  timeoutInMinutes: 300
  pool: '1804DC4CCagentpool'

  steps:
    # perform cleanup before starting pipeline
    - script: |
        sudo rm -rf /tmp/myst*
        df
      displayName: 'cleanup tmpfiles'
    # install minimum required package to run pipeline
    - script: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        sudo apt-get update
        sudo apt-get install build-essential python3-setuptools python3-pip llvm-7 libmbedtls-dev docker-ce -y
        sudo chmod 666 /var/run/docker.sock
        sudo apt install python3-pip -y
        sudo apt install lldb-10 -y
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        docker system prune -a -f
        df
      displayName: 'minimum init config'

    # build all source files
    - script: |
        # remove all untracked files and directories in the git repository
        sudo rm -rf `git ls-files --others --directory`
        make distclean
        make -j world
      displayName: 'build repo source'
      workingDirectory: $(Build.SourcesDirectory)
      env:
        MYST_NIGHTLY_TEST: 1

    # run all tests
    - script: |
        make tests ALLTESTS=1 VERBOSE=1
      displayName: 'run all tests'
      continueOnError: true
      enabled: true
      workingDirectory: $(Build.SourcesDirectory)
      env:
        MYST_NIGHTLY_TEST: 1
        MYST_DO_CLEANUP: 1

    # run solution tests
    - script: |
        make tests -C $(Build.SourcesDirectory)/solutions
      displayName: 'run solution tests'
      continueOnError: true
      enabled: true
      workingDirectory: $(Build.SourcesDirectory)
      env:
        # by default sql solution test will run on US EAST DB Node
        DB_NAME: $(DB_NAME_USEAST)
        DB_SERVER_NAME: $(DB_SERVER_NAME_USEAST)
        MAA_URL: $(DB_MAA_URL_USEAST)
        CLIENT_SECRET: $(MHSM_CLIENT_SECRET)
        CLIENT_ID: $(MHSM_CLIENT_ID)
        APP_ID: $(MHSM_APP_ID)
        SSR_PKEY: $(MHSM_SSR_PKEY)
        MYST_DO_CLEANUP: 1
        MYST_NIGHTLY_TEST: 1

    # Mini-clean up before running azure tests.
    - script: |
        make clean -C $(Build.SourcesDirectory)/tests
        make clean -C $(Build.SourcesDirectory)/solutions
        make clean -C $(Build.SourcesDirectory)/solutions/coreclr
        make clean -C $(Build.SourcesDirectory)/solutions/coreclr-p1
        docker system prune -f
        df
      displayName: 'Midterm clean up'
      continueOnError: true
      enabled: true

    - template: step-sql-soln-cacentral.yml
    
    - template: step-azure-sdk-tests.yml

    # run PyTorch tests
    - script: |
        make run -C $(Build.SourcesDirectory)/solutions/pytorch_tests
        make clean -C $(Build.SourcesDirectory)/solutions/pytorch_tests
      displayName: 'run PyTorch tests'
      continueOnError: true
      enabled: true
      workingDirectory: $(Build.SourcesDirectory)

    # clean up
    - script: |
        make clean -C $(Build.SourcesDirectory)/tests
        make clean -C $(Build.SourcesDirectory)/solutions
        sudo rm -rf $(Build.SourcesDirectory)/build/tests
        sudo rm -rf `git ls-files --others --directory`
        docker system prune -f
        df
      displayName: 'Cleanup test directories'
      continueOnError: true
      enabled: true

    # if any previous step(s) not succeed, fail the job
    - script: |
        echo "Not all steps succeed."
        exit 1
      displayName: 'Error(s) Check'
      condition: not(eq(variables['Agent.JobStatus'], 'succeeded'))        
    
